document.addEventListener("DOMContentLoaded", () => {
Â  const form = document.getElementById("applicationForm");
Â  const steps = document.querySelectorAll(".step-section");
Â  const nextBtn = document.getElementById("nextBtn");
Â  const prevBtn = document.getElementById("prevBtn");
Â  const joinedCommunity = document.getElementById("joinedCommunity");
Â  const communityUsernameContainer = document.getElementById("communityUsernameContainer");
Â  
Â  // Step Indicator DOM elements
Â  const progressBar = document.getElementById("progressBar");
Â  const progressText = document.getElementById("progressText");
Â  const currentStepTitle = document.getElementById("currentStepTitle");
Â  
Â  // Word Count DOM elements
Â  const impactAnswerTextarea = document.getElementById("impactAnswer");
Â  const wordCountFeedback = document.getElementById("wordCountFeedback");

Â  // Step Titles for the indicator
Â  const stepTitles = [
Â  Â  "Personal Information",
Â  Â  "Community & Socials",
Â  Â  "Commitment & Access",
Â  Â  "Short Question"
Â  ];

Â  let currentStep = 0;
Â  const totalSteps = steps.length;

Â  // Store all form data
Â  const formData = {
Â  Â  fullName: "",
Â  Â  email: "",
Â  Â  gender: "",
Â  Â  joinedCommunity: "",
Â  Â  communityUsername: "",
Â  Â  linkedin: "",
Â  Â  discord: "",
Â  Â  twitter: "",
Â  Â  commitment: "",
Â  Â  availability: "",
Â  Â  access: "",
Â  Â  impactAnswer: "",
Â  };

Â  // --- Frontend Data Persistence & Duplication Check ---

Â  const savedApplication = localStorage.getItem("wid_application");
Â  if (savedApplication) {
Â  Â  const appData = JSON.parse(savedApplication);
Â  Â  document.getElementById("app").innerHTML = `
Â  Â  Â  <div class="text-center py-20">
Â  Â  Â  Â  <h2 class="text-3xl font-bold text-indigo-700 mb-4">Welcome Back, ${appData.fullName}!</h2>
Â  Â  Â  Â  <p class="text-gray-700 mb-3">You have already submitted your application for the WID DeFi Skill-Up Program. We have kept your data.</p>
Â  Â  Â  Â  <p class="text-gray-500 mb-6">Duplicate applications are not allowed. You can clear local data to restart.</p>
Â  Â  Â  Â  <button id="restartApp" class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">Clear Data & Restart Application</button>
Â  Â  Â  </div>`;

Â  Â  document.getElementById("restartApp").addEventListener("click", () => {
Â  Â  Â  localStorage.clear();
Â  Â  Â  location.reload();
Â  Â  });
Â  Â  return;
Â  }

Â  // Show username input only if joined community
Â  joinedCommunity.addEventListener("change", (e) => {
Â  Â  communityUsernameContainer.classList.toggle("hidden", e.target.value !== "yes");
Â  });

Â  // Save input dynamically and remove error highlights
Â  form.addEventListener("input", (e) => {
Â  Â  if (e.target.name in formData) {
Â  Â  Â  formData[e.target.name] = e.target.value;
Â  Â  }
Â  Â  e.target.classList.remove('border-red-500');

Â  Â  // Update word count for the specific field
Â  Â  if (e.target.id === 'impactAnswer') {
Â  Â  Â  updateWordCountFeedback(e.target.value);
Â  Â  }
Â  });
Â  
Â  form.addEventListener("change", (e) => {
Â  Â  e.target.classList.remove('border-red-500');
Â  });

Â  // Function to update word count feedback
Â  function updateWordCountFeedback(text) {
Â  Â  const wordCount = text.trim().split(/\s+/).filter(word => word.length > 0).length;
Â  Â  wordCountFeedback.textContent = `Words: ${wordCount} / 50 minimum`;
Â  Â  Â  
Â  Â  if (wordCount < 50) {
Â  Â  Â  wordCountFeedback.classList.remove('text-gray-500');
Â  Â  Â  wordCountFeedback.classList.add('text-red-500');
Â  Â  } else {
Â  Â  Â  wordCountFeedback.classList.remove('text-red-500');
Â  Â  Â  wordCountFeedback.classList.add('text-gray-500');
Â  Â  }
Â  }

Â  // Next and Previous Handlers
Â  nextBtn.addEventListener("click", (e) => {
Â  Â  e.preventDefault();
Â  Â  if (!validateStep(currentStep)) {
Â  Â  Â  // Validation handled inline
Â  Â  Â  return;
Â  Â  }
Â  Â  if (currentStep < totalSteps - 1) {
Â  Â  Â  currentStep++;
Â  Â  Â  updateSteps();
Â  Â  } else {
Â  Â  Â  handleSubmit();
Â  Â  }
Â  });

Â  prevBtn.addEventListener("click", (e) => {
Â  Â  e.preventDefault();
Â  Â  if (currentStep > 0) {
Â  Â  Â  currentStep--;
Â  Â  Â  updateSteps();
Â  Â  }
Â  });

Â  // Handle step visibility, progress bar, and scroll
Â  function updateSteps() {
Â  Â  steps.forEach((step, index) => {
Â  Â  Â  step.classList.toggle("hidden", index !== currentStep);
Â  Â  });
Â  Â  
Â  Â  // Update Progress Bar and Text
Â  Â  const progress = ((currentStep + 1) / totalSteps) * 100;
Â  Â  progressBar.style.width = `${progress}%`;
Â  Â  progressText.textContent = `${currentStep + 1} of ${totalSteps}`;
Â  Â  currentStepTitle.textContent = `Step ${currentStep + 1}: ${stepTitles[currentStep]}`;

Â  Â  // Update Buttons
Â  Â  prevBtn.disabled = currentStep === 0;
Â  Â  prevBtn.classList.toggle('opacity-50', currentStep === 0);
Â  Â  nextBtn.textContent = currentStep === totalSteps - 1 ? "Submit Application" : "Next";
Â  Â  
Â  Â  // Scroll to the top of the application container for better UX
Â  Â  const appContainer = document.getElementById("app");
Â  Â  appContainer.scrollIntoView({ behavior: 'smooth' });
Â  }
Â  
Â  // Inline Validation Logic
Â  function validateStep(stepIndex) {
Â  Â  let isValid = true;
Â  Â  const currentStepSection = steps[stepIndex];
Â  Â  
Â  Â  // Reset validation highlights
Â  Â  currentStepSection.querySelectorAll('input, select, textarea').forEach(field => {
Â  Â  Â  field.classList.remove('border-red-500');
Â  Â  });

Â  Â  // Check required fields
Â  Â  const requiredFields = currentStepSection.querySelectorAll('[required]');
Â  Â  requiredFields.forEach(field => {
Â  Â  Â  if (!field.value || field.value.trim() === "") {
Â  Â  Â  Â  field.classList.add('border-red-500');
Â  Â  Â  Â  isValid = false;
Â  Â  Â  }
Â  Â  });
Â  Â  
Â  Â  // Specific validation rules for step 2 (Community Username)
Â  Â  if (stepIndex === 1 && formData.joinedCommunity === "yes" && !formData.communityUsername) {
Â  Â  Â  const usernameInput = currentStepSection.querySelector('input[name="communityUsername"]');
Â  Â  Â  usernameInput.classList.add('border-red-500');
Â  Â  Â  isValid = false;
Â  Â  }
Â  Â  
Â  Â  // Specific validation for Step 4 (Word count)
Â  Â  if (stepIndex === 3) {
Â  Â  Â  const wordCount = formData.impactAnswer.trim().split(/\s+/).filter(word => word.length > 0).length;
Â  Â  Â  const textarea = currentStepSection.querySelector('textarea[name="impactAnswer"]');
Â  Â  Â  if (wordCount < 50) {
Â  Â  Â  Â  textarea.classList.add('border-red-500');
Â  Â  Â  Â  isValid = false;
Â  Â  Â  }
Â  Â  }

Â  Â  return isValid;
Â  }

Â  // Simple grammar quality check (used only for internal client-side shortlisting score)
Â  function getWritingQualityScore(text) {
Â  Â  const clean = text.trim();
Â  Â  if (!clean) return 0;
Â  Â  const words = clean.split(/\s+/).filter(word => word.length > 0);
Â  Â  const sentences = clean.split(/[.!?]/).filter(Boolean);
Â  Â  let score = 100;
Â  Â  if (words.length < 30) score -= 30;
Â  Â  if (sentences.length < 2) score -= 10;
Â  Â  const uniqueWords = new Set(words.map(w => w.toLowerCase()));
Â  Â  const repetition = 1 - uniqueWords.size / words.length;
Â  Â  if (repetition > 0.2) score -= repetition * 40;
Â  Â  return Math.max(0, Math.min(100, Math.round(score)));
Â  }

Â  // Handle submission & Final Client-Side Shortlisting
Â  function handleSubmit() {
Â  Â  // All shortlisting criteria are client-side only
Â  Â  const isFemale = formData.gender === "female";
Â  Â  const joinedCommunity = formData.joinedCommunity === "yes";
Â  Â  const committed = formData.commitment === "yes";
Â  Â  const available = formData.availability !== "";
Â  Â  const hasAccess = formData.access === "yes";
Â  Â  
Â  Â  const motivationQuality = getWritingQualityScore(formData.impactAnswer);
Â  Â  const writingPass = motivationQuality >= 70;
Â  Â  const impactWordCount = formData.impactAnswer.trim().split(/\s+/).filter(word => word.length > 0).length;

Â  Â  const passedAll =
Â  Â  Â  isFemale &&
Â  Â  Â  joinedCommunity &&
Â  Â  Â  committed &&
Â  Â  Â  available &&
Â  Â  Â  hasAccess &&
Â  Â  Â  impactWordCount >= 50 &&
Â  Â  Â  writingPass;

Â  Â  // Save application locally
Â  Â  localStorage.setItem("wid_application", JSON.stringify({
Â  Â  Â  ...formData,
Â  Â  Â  shortlisted: passedAll,
Â  Â  Â  writingScore: motivationQuality // Internal score saved but not displayed
Â  Â  }));

Â  Â  // Feedback UI
Â  Â  if (passedAll) {
Â  Â  Â  document.getElementById("app").innerHTML = `
Â  Â  Â  Â  <div class="text-center py-20">
Â  Â  Â  Â  Â  <h2 class="text-3xl font-bold text-green-700 mb-4">ðŸŽ‰ Congratulations, ${formData.fullName}!</h2>
Â  Â  Â  Â  Â  <p class="text-gray-700 mb-3">Youâ€™ve been <b>shortlisted</b> for the WID DeFi Skill-Up Program. We will contact you soon!</p>
Â  Â  Â  Â  Â  <button id="restartApp" class="mt-6 px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">Clear Data & Restart Application</button>
Â  Â  Â  Â  </div>`;
Â  Â  } else {
Â  Â  Â  document.getElementById("app").innerHTML = `
Â  Â  Â  Â  <div class="text-center py-20">
Â  Â  Â  Â  Â  <h2 class="text-3xl font-bold text-red-600 mb-4">Application Received</h2>
Â  Â  Â  Â  Â  <p class="text-gray-700 mb-2">Thank you, ${formData.fullName}. Your application has been recorded.</p>
Â  Â  Â  Â  Â  <p class="text-gray-500 mb-4">We will review your application and be in touch.</p>
Â  Â  Â  Â  Â  <button id="restartApp" class="mt-6 px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">Clear Data & Restart Application</button>
Â  Â  Â  Â  </div>`;
Â  Â  }

Â  Â  document.getElementById("restartApp").addEventListener("click", () => {
Â  Â  Â  localStorage.clear();
Â  Â  Â  location.reload();
Â  Â  });
Â  }

Â  // Initialize form
Â  updateSteps();
Â  // Initialize word count feedback on load
Â  if (impactAnswerTextarea) {
Â  Â  updateWordCountFeedback(impactAnswerTextarea.value);
Â  }
});